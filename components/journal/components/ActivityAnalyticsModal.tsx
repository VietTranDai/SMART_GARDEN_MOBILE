import React from 'react';
import { View, Text, Modal, ScrollView, TouchableOpacity, ActivityIndicator } from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { GardenActivityAnalyticsDto } from '../../../types/activities/dtos';
import { useTheme } from '../../../contexts/ThemeContext';

// Helper functions for analytics
const formatPercentile = (value: number) => `${Math.round(value)}%`;
const formatEfficiencyRating = (value: number) => `${Math.round(value * 100)}%`;
const translateActivityType = (activityType: string) => {
  switch(activityType) {
    case 'WATERING': return 'T∆∞·ªõi n∆∞·ªõc';
    case 'FERTILIZING': return 'B√≥n ph√¢n';
    case 'PRUNING': return 'C·∫Øt t·ªâa';
    case 'HARVESTING': return 'Thu ho·∫°ch';
    case 'PLANTING': return 'Tr·ªìng c√¢y';
    case 'WEEDING': return 'Nh·ªï c·ªè d·∫°i';
    case 'PEST_CONTROL': return 'Di·ªát s√¢u b·ªánh';
    case 'SOIL_PREPARATION': return 'Chu·∫©n b·ªã ƒë·∫•t';
    case 'MULCHING': return 'Ph·ªß mulch';
    case 'TRANSPLANTING': return 'C·∫•y gh√©p';
    case 'MONITORING': return 'Theo d√µi';
    case 'MAINTENANCE': return 'B·∫£o d∆∞·ª°ng';
    case 'CLEANING': return 'V·ªá sinh';
    case 'SEEDING': return 'Gieo h·∫°t';
    case 'INSPECTION': return 'Ki·ªÉm tra';
    default: return activityType;
  }
};
const translateImprovementTrend = (trend: string) => {
  switch(trend) {
    case 'IMPROVING': return 'ƒêang c·∫£i thi·ªán';
    case 'STABLE': return '·ªîn ƒë·ªãnh';  
    case 'DECLINING': return 'ƒêang gi·∫£m';
    default: return trend;
  }
};
const translateEffectivenessLevel = (level: string) => {
  switch(level) {
    case 'EFFECTIVE': return 'Hi·ªáu qu·∫£';
    case 'OPTIMAL': return 'T·ªëi ∆∞u';
    case 'SUBOPTIMAL': return 'Ch∆∞a t·ªëi ∆∞u';
    case 'INEFFECTIVE': return 'Kh√¥ng hi·ªáu qu·∫£';
    default: return level;
  }
};
const formatSkillLevel = (level: string) => {
  switch(level) {
    case 'BEGINNER': return 'Ng∆∞·ªùi m·ªõi';
    case 'INTERMEDIATE': return 'Trung c·∫•p';
    case 'ADVANCED': return 'N√¢ng cao';
    case 'EXPERT': return 'Chuy√™n gia';
    default: return level;
  }
};
const getRatingColor = (rating: number) => {
  if (rating >= 0.8) return '#10B981';
  if (rating >= 0.6) return '#F59E0B';
  return '#EF4444';
};
const formatDuration = (minutes: number) => {
  const hours = Math.floor(minutes / 60);
  const mins = minutes % 60;
  if (hours > 0) {
    return `${hours}h${mins > 0 ? ` ${mins}m` : ''}`;
  }
  return `${mins}m`;
};

interface ActivityAnalyticsModalProps {
  visible: boolean;
  onClose: () => void;
  analytics: GardenActivityAnalyticsDto | null;
  loading?: boolean;
}

export const ActivityAnalyticsModal: React.FC<ActivityAnalyticsModalProps> = ({
  visible,
  onClose,
  analytics,
  loading = false
}) => {
  const { isDarkMode } = useTheme();

  const theme = {
    primary: '#4F46E5',
    surface: isDarkMode ? '#1F2937' : '#FFFFFF',
    surfaceVariant: isDarkMode ? '#374151' : '#F8FAFC',
    text: isDarkMode ? '#F9FAFB' : '#111827',
    textSecondary: isDarkMode ? '#D1D5DB' : '#6B7280',
    outline: isDarkMode ? '#4B5563' : '#E5E7EB',
    background: isDarkMode ? '#111827' : '#F9FAFB',
    success: '#10B981',
    warning: '#F59E0B',
    error: '#EF4444'
  };

  const Section = ({ title, icon, children }: { title: string; icon: string; children: React.ReactNode }) => (
    <View style={{ marginBottom: 20 }}>
      <View style={{
        flexDirection: 'row',
        alignItems: 'center',
        marginBottom: 12,
        paddingBottom: 12,
        borderBottomWidth: 1,
        borderBottomColor: theme.outline
      }}>
        <Text style={{ fontSize: 22, marginRight: 8 }}>{icon}</Text>
        <Text style={{
          fontSize: 18,
          fontWeight: 'bold',
          color: theme.text
        }}>
          {title}
        </Text>
      </View>
      {children}
    </View>
  );

  const InfoCard = ({ children }: { children: React.ReactNode }) => (
    <View style={{
      backgroundColor: theme.surfaceVariant,
      padding: 16,
      borderRadius: 12,
      marginBottom: 12
    }}>
      {children}
    </View>
  );

  const InfoRow = ({ label, value, valueColor }: { label: string; value: string | number; valueColor?: string }) => (
    <View style={{ flexDirection: 'row', justifyContent: 'space-between', marginBottom: 8 }}>
      <Text style={{ fontSize: 15, color: theme.textSecondary, flex: 1 }}>{label}:</Text>
      <Text style={{
        fontSize: 15,
        fontWeight: '600',
        color: valueColor || theme.text,
        flex: 1,
        textAlign: 'right'
      }}>
        {value}
      </Text>
    </View>
  );

  const renderBasicInfo = () => analytics && (
    <Section title="Th√¥ng tin c∆° b·∫£n" icon="üìã">
      <InfoCard>
        <InfoRow label="T√™n ho·∫°t ƒë·ªông" value={analytics.name || 'Kh√¥ng c√≥ t√™n'} />
        <InfoRow label="Lo·∫°i ho·∫°t ƒë·ªông" value={translateActivityType(analytics.activityType || 'Kh√¥ng x√°c ƒë·ªãnh')} />
        <InfoRow label="Th·ªùi gian th·ª±c hi·ªán" value={new Date(analytics.timestamp).toLocaleString('vi-VN')} />
        <InfoRow label="L√Ω do th·ª±c hi·ªán" value={analytics.reason || 'Kh√¥ng c√≥ l√Ω do'} />
        {analytics.details && <InfoRow label="Chi ti·∫øt" value={analytics.details} />}
        {analytics.notes && <InfoRow label="Ghi ch√∫" value={analytics.notes} />}
      </InfoCard>
    </Section>
  );

  const renderGardenInfo = () => analytics?.garden && (
    <Section title="Th√¥ng tin v∆∞·ªùn" icon="üå±">
      <InfoCard>
        <InfoRow label="T√™n v∆∞·ªùn" value={analytics.garden.name || 'Kh√¥ng c√≥ t√™n'} />
        <InfoRow label="Lo·∫°i v∆∞·ªùn" value={analytics.garden.type === 'OUTDOOR' ? 'Ngo√†i tr·ªùi' : 'Trong nh√†'} />
        <InfoRow label="Tr·∫°ng th√°i" value={analytics.garden.status === 'ACTIVE' ? 'Ho·∫°t ƒë·ªông' : 'Kh√¥ng ho·∫°t ƒë·ªông'} />
        <InfoRow label="ƒê·ªãa ƒëi·ªÉm" value={`${analytics.garden.ward || ''}, ${analytics.garden.district || ''}, ${analytics.garden.city || ''}`} />
        <InfoRow label="C√¢y tr·ªìng" value={analytics.plantName || 'Kh√¥ng x√°c ƒë·ªãnh'} />
        <InfoRow label="Giai ƒëo·∫°n ph√°t tri·ªÉn" value={analytics.plantGrowStage || 'Kh√¥ng x√°c ƒë·ªãnh'} />
      </InfoCard>
    </Section>
  );

  const renderGardenerInfo = () => analytics?.gardener && (
    <Section title="Ng∆∞·ªùi l√†m v∆∞·ªùn" icon="üë®‚Äçüåæ">
      <InfoCard>
        <InfoRow 
          label="T√™n" 
          value={`${analytics.gardener.user?.firstName || ''} ${analytics.gardener.user?.lastName || ''}`.trim() || 'Kh√¥ng c√≥ t√™n'} 
        />
        <InfoRow label="Username" value={analytics.gardener.user?.username || 'Kh√¥ng c√≥ username'} />
        <InfoRow label="C·∫•p ƒë·ªô kinh nghi·ªám" value={analytics.gardener.experienceLevel?.title || 'Kh√¥ng x√°c ƒë·ªãnh'} />
        <InfoRow label="ƒêi·ªÉm kinh nghi·ªám" value={(analytics.gardener.experiencePoints || 0).toLocaleString('vi-VN')} />
      </InfoCard>
    </Section>
  );

  const renderExecutionDetails = () => analytics?.executionDetails && (
    <Section title="Chi ti·∫øt th·ª±c hi·ªán" icon="‚ö°">
      <InfoCard>
        <InfoRow label="Th·ªùi gian d·ª± ki·∫øn" value={`${analytics.executionDetails.executionConditions?.availableTime || 0} ph√∫t`} />
        <InfoRow label="Th·ªùi gian th·ª±c t·∫ø" value={`${analytics.executionDetails.actualDuration || 0} ph√∫t`} />
        <InfoRow 
          label="Hi·ªáu qu·∫£ th·ªùi gian" 
          value={formatPercentile(analytics.executionDetails.durationEfficiency || 0)}
          valueColor={getRatingColor((analytics.executionDetails.durationEfficiency || 0) / 100)}
        />
        <InfoRow label="Ph∆∞∆°ng ph√°p" value={analytics.executionDetails.method || 'Kh√¥ng x√°c ƒë·ªãnh'} />
        <InfoRow 
          label="M·ª©c ƒë·ªô kh√≥" 
          value={analytics.executionDetails.executionConditions?.difficultyLevel === 'EASY' ? 'D·ªÖ' : 
                analytics.executionDetails.executionConditions?.difficultyLevel === 'MEDIUM' ? 'Trung b√¨nh' : 
                analytics.executionDetails.executionConditions?.difficultyLevel === 'HARD' ? 'Kh√≥' : 'Kh√¥ng x√°c ƒë·ªãnh'} 
        />
        <InfoRow 
          label="T·ª∑ l·ªá ho√†n th√†nh" 
          value={formatPercentile(analytics.executionDetails.immediateResults?.completionRate || 0)}
          valueColor={getRatingColor((analytics.executionDetails.immediateResults?.completionRate || 0) / 100)}
        />
        <InfoRow 
          label="ƒê√°nh gi√° ch·∫•t l∆∞·ª£ng" 
          value={`${analytics.executionDetails.immediateResults?.qualityRating || 0}/5 ‚≠ê`}
          valueColor={getRatingColor((analytics.executionDetails.immediateResults?.qualityRating || 0) / 5)}
        />
      </InfoCard>
      
      {analytics.executionDetails.toolsUsed && analytics.executionDetails.toolsUsed.length > 0 && (
        <InfoCard>
          <Text style={{ fontSize: 16, fontWeight: '600', color: theme.text, marginBottom: 8 }}>
            D·ª•ng c·ª• s·ª≠ d·ª•ng:
          </Text>
          <Text style={{ fontSize: 15, color: theme.textSecondary }}>
            {analytics.executionDetails.toolsUsed.join(', ')}
          </Text>
        </InfoCard>
      )}
      
      {analytics.executionDetails.materialsUsed && analytics.executionDetails.materialsUsed.length > 0 && (
        <InfoCard>
          <Text style={{ fontSize: 16, fontWeight: '600', color: theme.text, marginBottom: 8 }}>
            V·∫≠t li·ªáu s·ª≠ d·ª•ng:
          </Text>
          <Text style={{ fontSize: 15, color: theme.textSecondary }}>
            {analytics.executionDetails.materialsUsed.join(', ')}
          </Text>
        </InfoCard>
      )}
    </Section>
  );

  const renderEffectivenessAnalysis = () => analytics?.effectivenessAnalysis && (
    <Section title="Ph√¢n t√≠ch hi·ªáu qu·∫£" icon="üìä">
      <InfoCard>
        <Text style={{ fontSize: 16, fontWeight: '600', color: theme.text, marginBottom: 10 }}>
          Hi·ªáu qu·∫£ t·ª©c th√¨:
        </Text>
        <InfoRow 
          label="T·ªïng th·ªÉ" 
          value={translateEffectivenessLevel(analytics.effectivenessAnalysis.immediateEffectiveness?.overallEffectiveness || 'INEFFECTIVE')}
          valueColor={analytics.effectivenessAnalysis.immediateEffectiveness?.overallEffectiveness === 'EFFECTIVE' ? theme.success : theme.warning}
        />
        <InfoRow 
          label="ƒêi·ªÉm ch·∫•t l∆∞·ª£ng" 
          value={`${analytics.effectivenessAnalysis.immediateEffectiveness?.qualityScore || 0}/100`}
          valueColor={getRatingColor((analytics.effectivenessAnalysis.immediateEffectiveness?.qualityScore || 0) / 100)}
        />
        <InfoRow 
          label="Hi·ªáu qu·∫£ th·ªùi gian" 
          value={formatPercentile(analytics.effectivenessAnalysis.immediateEffectiveness?.timeEfficiency || 0)}
          valueColor={getRatingColor((analytics.effectivenessAnalysis.immediateEffectiveness?.timeEfficiency || 0) / 100)}
        />
        <InfoRow 
          label="Hi·ªáu qu·∫£ t√†i nguy√™n" 
          value={formatPercentile(analytics.effectivenessAnalysis.immediateEffectiveness?.resourceEfficiency || 0)}
          valueColor={getRatingColor((analytics.effectivenessAnalysis.immediateEffectiveness?.resourceEfficiency || 0) / 100)}
        />
      </InfoCard>

      {analytics.effectivenessAnalysis.longTermEffectiveness && (
        <InfoCard>
          <Text style={{ fontSize: 16, fontWeight: '600', color: theme.text, marginBottom: 10 }}>
            Hi·ªáu qu·∫£ d√†i h·∫°n:
          </Text>
          <InfoRow label="T√°c ƒë·ªông t√≠ch l≈©y" value={`${analytics.effectivenessAnalysis.longTermEffectiveness.cumulativeEffect || 0}%`} />
          <InfoRow label="T√°c ƒë·ªông ƒë·∫øn tƒÉng tr∆∞·ªüng" value={`${analytics.effectivenessAnalysis.longTermEffectiveness.growthImpact || 0}%`} />
          <InfoRow label="T√°c ƒë·ªông ƒë·∫øn s·ª©c kh·ªèe c√¢y" value={`${analytics.effectivenessAnalysis.longTermEffectiveness.plantHealthImpact || 0}%`} />
          <InfoRow label="T√°c ƒë·ªông nƒÉng su·∫•t" value={`${analytics.effectivenessAnalysis.longTermEffectiveness.yieldImpact || 0}%`} />
        </InfoCard>
      )}

      {analytics.effectivenessAnalysis.outcomes && (
        <InfoCard>
          <Text style={{ fontSize: 16, fontWeight: '600', color: theme.text, marginBottom: 10 }}>
            K·∫øt qu·∫£ ƒë·∫°t ƒë∆∞·ª£c:
          </Text>
          <InfoRow 
            label="T·ª∑ l·ªá th√†nh c√¥ng" 
            value={formatPercentile(analytics.effectivenessAnalysis.outcomes.successRate || 0)}
            valueColor={getRatingColor((analytics.effectivenessAnalysis.outcomes.successRate || 0) / 100)}
          />
          <InfoRow label="Gi√° tr·ªã kinh t·∫ø" value={`${(analytics.effectivenessAnalysis.outcomes.economicValue || 0).toLocaleString('vi-VN')} VNƒê`} />
          <InfoRow 
            label="M·ª©c ƒë·ªô h√†i l√≤ng" 
            value={`${analytics.effectivenessAnalysis.outcomes.satisfactionValue || 0}/10`}
            valueColor={getRatingColor((analytics.effectivenessAnalysis.outcomes.satisfactionValue || 0) / 10)}
          />
          <InfoRow label="Th·ªùi gian ti·∫øt ki·ªám" value={`${analytics.effectivenessAnalysis.outcomes.timeValueSaved || 0} ph√∫t`} />
        </InfoCard>
      )}
    </Section>
  );

  const renderUserPerformance = () => analytics?.userPerformance && (
    <Section title="Hi·ªáu su·∫•t c√° nh√¢n" icon="üéØ">
      {analytics.userPerformance.skillAssessment && (
        <InfoCard>
          <Text style={{ fontSize: 16, fontWeight: '600', color: theme.text, marginBottom: 10 }}>
            ƒê√°nh gi√° k·ªπ nƒÉng:
          </Text>
          <InfoRow 
            label="C·∫•p ƒë·ªô k·ªπ nƒÉng hi·ªán t·∫°i" 
            value={formatSkillLevel(analytics.userPerformance.skillAssessment.currentSkillLevel || 'BEGINNER')} 
          />
          <InfoRow 
            label="Chuy√™n m√¥n ho·∫°t ƒë·ªông" 
            value={formatPercentile(analytics.userPerformance.skillAssessment.activityExpertise || 0)}
            valueColor={getRatingColor((analytics.userPerformance.skillAssessment.activityExpertise || 0) / 100)}
          />
          <InfoRow 
            label="T·ªëc ƒë·ªô c·∫£i thi·ªán" 
            value={`${(analytics.userPerformance.skillAssessment.improvementRate || 0).toFixed(1)}%/th√°ng`}
            valueColor={theme.success}
          />
        </InfoCard>
      )}

      {analytics.userPerformance.workEfficiency && (
        <InfoCard>
          <Text style={{ fontSize: 16, fontWeight: '600', color: theme.text, marginBottom: 10 }}>
            Hi·ªáu qu·∫£ c√¥ng vi·ªác:
          </Text>
          <InfoRow 
            label="ƒê√°nh gi√° t·ªëc ƒë·ªô" 
            value={`${analytics.userPerformance.workEfficiency.speedRating || 0}/5 ‚≠ê`}
            valueColor={getRatingColor((analytics.userPerformance.workEfficiency.speedRating || 0) / 5)}
          />
          <InfoRow 
            label="ƒê√°nh gi√° ƒë·ªô ch√≠nh x√°c" 
            value={`${analytics.userPerformance.workEfficiency.accuracyRating || 0}/5 ‚≠ê`}
            valueColor={getRatingColor((analytics.userPerformance.workEfficiency.accuracyRating || 0) / 5)}
          />
          <InfoRow 
            label="ƒê√°nh gi√° t√≠nh nh·∫•t qu√°n" 
            value={`${analytics.userPerformance.workEfficiency.consistencyRating || 0}/5 ‚≠ê`}
            valueColor={getRatingColor((analytics.userPerformance.workEfficiency.consistencyRating || 0) / 5)}
          />
          <InfoRow 
            label="C·∫£i thi·ªán t·ªïng th·ªÉ" 
            value={`+${(analytics.userPerformance.workEfficiency.overallImprovement || 0).toFixed(1)}%`}
            valueColor={theme.success}
          />
        </InfoCard>
      )}

      {analytics.userPerformance.motivation && (
        <InfoCard>
          <Text style={{ fontSize: 16, fontWeight: '600', color: theme.text, marginBottom: 10 }}>
            ƒê·ªông l·ª±c v√† th√°i ƒë·ªô:
          </Text>
          <InfoRow 
            label="M·ª©c ƒë·ªô ƒë·ªông l·ª±c" 
            value={`${analytics.userPerformance.motivation.motivationLevel || 0}/10`}
            valueColor={getRatingColor((analytics.userPerformance.motivation.motivationLevel || 0) / 10)}
          />
          <InfoRow 
            label="M·ª©c ƒë·ªô th√≠ch th√∫" 
            value={`${analytics.userPerformance.motivation.enjoymentLevel || 0}/10`}
            valueColor={getRatingColor((analytics.userPerformance.motivation.enjoymentLevel || 0) / 10)}
          />
          <InfoRow 
            label="M·ª©c ƒë·ªô t·ª± tin" 
            value={`${analytics.userPerformance.motivation.confidenceLevel || 0}/10`}
            valueColor={getRatingColor((analytics.userPerformance.motivation.confidenceLevel || 0) / 10)}
          />
          <InfoRow 
            label="M·ª©c ƒë·ªô cƒÉng th·∫≥ng" 
            value={`${analytics.userPerformance.motivation.stressLevel || 0}/10`}
            valueColor={getRatingColor(1 - (analytics.userPerformance.motivation.stressLevel || 0) / 10)}
          />
        </InfoCard>
      )}

      {analytics.userPerformance.workingHabits && (
        <InfoCard>
          <Text style={{ fontSize: 16, fontWeight: '600', color: theme.text, marginBottom: 10 }}>
            Th√≥i quen l√†m vi·ªác:
          </Text>
          <InfoRow 
            label="Phong c√°ch l√†m vi·ªác" 
            value={analytics.userPerformance.workingHabits.workingStyle === 'SYSTEMATIC' ? 'C√≥ h·ªá th·ªëng' : 'Linh ho·∫°t'} 
          />
          <InfoRow 
            label="Xu h∆∞·ªõng l·∫≠p k·∫ø ho·∫°ch" 
            value={analytics.userPerformance.workingHabits.planningTendency === 'PLANNED' ? 'C√≥ k·∫ø ho·∫°ch' : 'T·ª± ph√°t'} 
          />
          <InfoRow label="Th·ªùi gian ∆∞a th√≠ch" value={analytics.userPerformance.workingHabits.preferredTimeOfDay || 'Kh√¥ng x√°c ƒë·ªãnh'} />
        </InfoCard>
      )}
    </Section>
  );

  const renderLearningAnalysis = () => analytics?.learningAnalysis && (
    <Section title="Ph√¢n t√≠ch h·ªçc t·∫≠p" icon="üìö">
      {analytics.learningAnalysis.experienceGained && (
        <InfoCard>
          <Text style={{ fontSize: 16, fontWeight: '600', color: theme.text, marginBottom: 10 }}>
            Kinh nghi·ªám ƒë·∫°t ƒë∆∞·ª£c:
          </Text>
          <InfoRow 
            label="ƒêi·ªÉm kinh nghi·ªám nh·∫≠n" 
            value={`+${analytics.learningAnalysis.experienceGained.xpEarned || 0} XP`}
            valueColor={theme.success}
          />
          <InfoRow label="C·∫•p ƒë·ªô hi·ªán t·∫°i" value={analytics.learningAnalysis.experienceGained.levelAfter || 1} />
          <InfoRow 
            label="Ti·∫øn ƒë·ªô c·∫•p ƒë·ªô" 
            value={formatPercentile(analytics.learningAnalysis.experienceGained.progressInCurrentLevel || 0)}
            valueColor={getRatingColor((analytics.learningAnalysis.experienceGained.progressInCurrentLevel || 0) / 100)}
          />
          <InfoRow label="ƒêi·ªÉm c·∫ßn ƒë·ªÉ l√™n c·∫•p" value={analytics.learningAnalysis.experienceGained.pointsToNextLevel || 0} />
          <InfoRow label="Th·ªùi gian d·ª± ki·∫øn l√™n c·∫•p" value={`${analytics.learningAnalysis.experienceGained.estimatedTimeToNextLevel || 0} ho·∫°t ƒë·ªông`} />
        </InfoCard>
      )}

      {analytics.learningAnalysis.skillDevelopment && (
        <InfoCard>
          <Text style={{ fontSize: 16, fontWeight: '600', color: theme.text, marginBottom: 10 }}>
            Ph√°t tri·ªÉn k·ªπ nƒÉng:
          </Text>
          <InfoRow 
            label="Thay ƒë·ªïi tr√¨nh ƒë·ªô chuy√™n m√¥n" 
            value={`+${analytics.learningAnalysis.skillDevelopment.expertiseLevelChange || 0}%`}
            valueColor={theme.success}
          />
        </InfoCard>
      )}
    </Section>
  );

  const renderActivityPatterns = () => analytics?.activityPatterns && (
    <Section title="M·∫´u ho·∫°t ƒë·ªông" icon="üìà">
      {analytics.activityPatterns.frequency && (
        <InfoCard>
          <Text style={{ fontSize: 16, fontWeight: '600', color: theme.text, marginBottom: 10 }}>
            T·∫ßn su·∫•t th·ª±c hi·ªán:
          </Text>
          <InfoRow label="T·∫ßn su·∫•t h√†ng ng√†y" value={`${(analytics.activityPatterns.frequency.dailyFrequency || 0).toFixed(1)} l·∫ßn/ng√†y`} />
          <InfoRow label="T·∫ßn su·∫•t h√†ng tu·∫ßn" value={`${(analytics.activityPatterns.frequency.weeklyFrequency || 0).toFixed(1)} l·∫ßn/tu·∫ßn`} />
          <InfoRow label="T·∫ßn su·∫•t h√†ng th√°ng" value={`${analytics.activityPatterns.frequency.monthlyFrequency || 0} l·∫ßn/th√°ng`} />
          <InfoRow label="Kho·∫£ng c√°ch trung b√¨nh" value={`${(analytics.activityPatterns.frequency.averageIntervalDays || 0).toFixed(1)} ng√†y`} />
          <InfoRow label="Ng√†y t·ª´ l·∫ßn cu·ªëi" value={`${analytics.activityPatterns.frequency.daysSinceLastSameActivity || 0} ng√†y`} />
          <InfoRow 
            label="ƒê√°nh gi√° t·∫ßn su·∫•t" 
            value={analytics.activityPatterns.frequency.frequencyRating === 'OPTIMAL' ? 'T·ªëi ∆∞u' : 'C·∫ßn ƒëi·ªÅu ch·ªânh'}
            valueColor={analytics.activityPatterns.frequency.frequencyRating === 'OPTIMAL' ? theme.success : theme.warning}
          />
        </InfoCard>
      )}

      {analytics.activityPatterns.frequency?.nextRecommendedDate && (
        <InfoCard>
          <Text style={{ fontSize: 16, fontWeight: '600', color: theme.text, marginBottom: 10 }}>
            L·ªãch tr√¨nh ƒë∆∞·ª£c ƒë·ªÅ xu·∫•t:
          </Text>
          <InfoRow label="L·∫ßn ti·∫øp theo n√™n th·ª±c hi·ªán" value={new Date(analytics.activityPatterns.frequency.nextRecommendedDate).toLocaleDateString('vi-VN')} />
          <InfoRow label="T·∫ßn su·∫•t ƒë∆∞·ª£c ƒë·ªÅ xu·∫•t" value={`M·ªói ${analytics.activityPatterns.frequency.recommendedFrequency || 1} ng√†y`} />
        </InfoCard>
      )}
    </Section>
  );

  return (
    <Modal
      visible={visible}
      animationType="slide"
      transparent={true}
      onRequestClose={onClose}
    >
      <View style={{
        flex: 1,
        backgroundColor: 'rgba(0,0,0,0.5)',
        justifyContent: 'center',
        alignItems: 'center',
        padding: 8
      }}>
        <View style={{
          backgroundColor: theme.surface,
          borderRadius: 16,
          padding: 24,
          width: '98%',
          maxHeight: '95%',
          minHeight: '80%'
        }}>
          {/* Header */}
          <View style={{ 
            flexDirection: 'row', 
            alignItems: 'center', 
            marginBottom: 20,
            borderBottomWidth: 1,
            borderBottomColor: theme.outline,
            paddingBottom: 16
          }}>
            <Ionicons name="analytics-outline" size={28} color={theme.primary} />
            <Text style={{
              fontSize: 22,
              fontWeight: 'bold',
              color: theme.text,
              marginLeft: 12,
              flex: 1
            }}>
              Ph√¢n t√≠ch ho·∫°t ƒë·ªông chi ti·∫øt
            </Text>
            <TouchableOpacity onPress={onClose}>
              <Ionicons name="close" size={28} color={theme.textSecondary} />
            </TouchableOpacity>
          </View>

          <ScrollView showsVerticalScrollIndicator={false}>
            {/* Loading State */}
            {loading && (
              <View style={{ alignItems: 'center', padding: 50 }}>
                <ActivityIndicator size="large" color={theme.primary} />
                <Text style={{ marginTop: 20, color: theme.textSecondary, textAlign: 'center', fontSize: 16 }}>
                  ƒêang ph√¢n t√≠ch ho·∫°t ƒë·ªông...
                </Text>
              </View>
            )}

            {/* No Data State */}
            {!loading && !analytics && (
              <View style={{ alignItems: 'center', padding: 50 }}>
                <Ionicons name="alert-circle-outline" size={56} color={theme.error} />
                <Text style={{ 
                  color: theme.textSecondary, 
                  textAlign: 'center', 
                  lineHeight: 24,
                  marginTop: 20,
                  fontSize: 16
                }}>
                  Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu ph√¢n t√≠ch ho·∫°t ƒë·ªông.
                  {'\n\n'}Vui l√≤ng th·ª≠ l·∫°i sau.
                </Text>
              </View>
            )}

            {/* Analytics Data */}
            {!loading && analytics && (
              <View>
                {renderBasicInfo()}
                {renderGardenInfo()}
                {renderGardenerInfo()}
                {renderExecutionDetails()}
                {renderEffectivenessAnalysis()}
                {renderUserPerformance()}
                {renderLearningAnalysis()}
                {renderActivityPatterns()}
              </View>
            )}
          </ScrollView>

          {/* Footer */}
          <TouchableOpacity
            style={{
              backgroundColor: theme.primary,
              paddingVertical: 16,
              paddingHorizontal: 24,
              borderRadius: 12,
              alignItems: 'center',
              marginTop: 20
            }}
            onPress={onClose}
          >
            <Text style={{
              color: '#FFFFFF',
              fontSize: 16,
              fontWeight: '600'
            }}>
              ƒê√≥ng
            </Text>
          </TouchableOpacity>
        </View>
      </View>
    </Modal>
  );
}; 